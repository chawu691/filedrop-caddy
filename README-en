
# Universal File Drop

Universal File Drop is a full-stack web application that provides a simple file upload service with an administrative panel for managing uploaded files. Users can easily drag-and-drop or select files for upload, receive a shareable link, and administrators can view, delete, and set expiration dates for these files.

The application is built with a React frontend (styled with Tailwind CSS) and a Node.js/Express backend using SQLite for metadata storage. It's designed to be deployed using Docker.

## Features

*   **File Upload:**
    *   Drag-and-drop support.
    *   File selection via dialog.
    *   Progress bar simulation during upload.
    *   Maximum file size limit (configurable, default 20MB).
    *   Generation of a shareable link upon successful upload.
*   **Admin Panel (`#admin` route):**
    *   Protected by Basic Authentication.
    *   Lists all uploaded files with details (name, size, upload date, expiry date).
    *   Allows deletion of uploaded files (removes from server storage and database).
    *   Allows setting/updating expiration dates for files.
*   **Static File Serving:** Serves uploaded files directly via unique links.
*   **Database Storage:** SQLite is used to store metadata about uploaded files.
*   **Dockerized:** Includes a `Dockerfile` for easy containerized deployment.

## Tech Stack

*   **Frontend:**
    *   React 19
    *   Tailwind CSS (via CDN)
    *   TypeScript
    *   `esbuild` for bundling
    *   Import Maps for browser-native ES module loading (via esm.sh)
*   **Backend:**
    *   Node.js
    *   Express.js
    *   SQLite3 (for database)
    *   Multer (for handling `multipart/form-data` file uploads)
    *   UUID (for generating unique file IDs)
    *   TypeScript
*   **Development & Deployment:**
    *   Docker & Docker Compose (implied, `Dockerfile` provided)
    *   `concurrently` (for running frontend and backend simultaneously in development)
    *   `nodemon` (for backend hot-reloading in development)

## Prerequisites

*   [Node.js](https://nodejs.org/) (v18 or later recommended)
*   [npm](https://www.npmjs.com/) (usually comes with Node.js)
*   [Docker Desktop](https://www.docker.com/products/docker-desktop/) (or Docker Engine on Linux)

## Getting Started & Local Development

1.  **Clone the repository:**
    ```bash
    git clone <your-repository-url>
    cd universal-file-drop
    ```

2.  **Install root dependencies:**
    (These are mainly for `esbuild` and `concurrently`)
    ```bash
    npm install
    ```

3.  **Install backend dependencies:**
    ```bash
    cd backend
    npm install
    cd ..
    ```

4.  **Environment Variables (Backend - Optional for Local Dev):**
    The backend uses basic authentication for the admin panel. Default credentials are `admin` / `password`.
    You can override these by creating a `.env` file in the `backend/` directory:
    ```
    # backend/.env
    ADMIN_USER=your_custom_admin_username
    ADMIN_PASSWORD=your_custom_admin_password
    PORT=3001 # Optional, defaults to 3001
    ```
    *Note: The `.env` file is gitignored. Remember to create it manually if needed.*

5.  **Build the application (Frontend & Backend):**
    This command builds the frontend assets and compiles the backend TypeScript.
    ```bash
    npm run build
    ```

6.  **Run in Development Mode (with hot-reloading):**
    This will start the frontend bundler in watch mode and the backend server with `nodemon`.
    ```bash
    npm run dev
    ```
    *   Frontend will be accessible, served by the backend at `http://localhost:3001`
    *   Admin panel at `http://localhost:3001/#admin`

7.  **Run in Production-like Mode (after building):**
    ```bash
    npm start
    ```
    This starts only the backend server, which serves the pre-built frontend assets. Access at `http://localhost:3001`.

## Docker Deployment

The application includes a `Dockerfile` to build a production-ready image.

1.  **Ensure Dockerfile and .dockerignore are correctly named:**
    *   The Docker configuration file should be named `Dockerfile` (no extension).
    *   The ignore file should be named `.dockerignore` (no extension).

2.  **Build the Docker image:**
    From the project root directory:
    ```bash
    docker build -t universal-file-drop .
    ```

3.  **Prepare Host Directories for Volumes:**
    To persist uploaded files and the SQLite database outside the container, you should mount volumes. Create these directories on your host machine **before** running the container for the first time:
    ```bash
    mkdir -p backend/uploads
    mkdir -p backend/database
    ```
    These paths correspond to the source paths for volume mounts if you're running `docker run` from the project root.

4.  **Run the Docker container:**
    ```bash
    docker run -d \
      -p 3001:3001 \
      -v "$(pwd)/backend/uploads:/app/backend/uploads" \
      -v "$(pwd)/backend/database:/app/backend/database" \
      -e ADMIN_USER="your_admin_username" \
      -e ADMIN_PASSWORD="your_admin_password" \
      -e PORT="3001" \
      --name ufd-app \
      universal-file-drop
    ```
    *   `-d`: Run in detached mode.
    *   `-p 3001:3001`: Map port 3001 on the host to port 3001 in the container.
    *   `-v "$(pwd)/backend/uploads:/app/backend/uploads"`: Mounts the host's `./backend/uploads` directory to `/app/backend/uploads` in the container for persistent file storage.
    *   `-v "$(pwd)/backend/database:/app/backend/database"`: Mounts the host's `./backend/database` directory to `/app/backend/database` in the container for the persistent SQLite database.
    *   `-e ADMIN_USER="your_admin_username"`: Sets the admin username.
    *   `-e ADMIN_PASSWORD="your_admin_password"`: Sets the admin password.
    *   `-e PORT="3001"`: (Optional) Sets the port the server inside the container will listen on.
    *   `--name ufd-app`: Assigns a name to the container for easier management.

    The application will be accessible at `http://localhost:3001`.

5.  **Permissions for Volumes (Troubleshooting `SQLITE_CANTOPEN`):**
    When using Docker volumes, the user inside the container (`appuser`) needs write permissions to the mounted host directories. If you encounter an `SQLITE_CANTOPEN: unable to open database file` error, it's likely a permissions issue on your host directory (`backend/database`).
    *   **Quick Fix (Development):** Grant universal write access to your host directories:
        ```bash
        sudo chmod -R 777 backend/database
        sudo chmod -R 777 backend/uploads
        ```
    *   **More Secure Fix:** Determine the UID/GID of `appuser` inside the container (often 1000 or 100 for Alpine's `adduser -S`) and `chown` your host directories to that UID/GID.
        ```bash
        # Example if appuser UID/GID is 1000
        sudo chown -R 1000:1000 backend/database
        sudo chown -R 1000:1000 backend/uploads
        ```

## Usage

*   **Upload Page:** Navigate to `http://localhost:3001` (or your Docker host's IP/domain).
*   **Admin Panel:** Navigate to `http://localhost:3001/#admin`.
    *   **Default Credentials (if not overridden):**
        *   Username: `admin`
        *   Password: `password`
    *   These can be changed using environment variables when running the Docker container (see above) or by modifying them directly in `backend/src/middleware/auth.ts` (not recommended for production if using Docker).

## Project Structure

```
.
├── Dockerfile            # Docker configuration
├── .dockerignore         # Files to ignore for Docker build
├── index.html            # Main HTML file for the frontend
├── index.tsx             # Frontend entry point (React)
├── App.tsx               # Main React application component
├── metadata.json         # Application metadata
├── package.json          # Root project scripts and frontend build dependencies
├── package-lock.json     # Root project lock file
├── tsconfig.json         # (If you add one at root for editor, currently frontend uses esbuild directly)
├── components/           # React components for the frontend
│   ├── FileUpload.tsx
│   ├── AdminPage.tsx
│   └── UploadIcon.tsx
├── dist_frontend/        # Output directory for built frontend assets (generated)
└── backend/
    ├── package.json      # Backend dependencies and scripts
    ├── package-lock.json # Backend lock file
    ├── tsconfig.json     # TypeScript configuration for backend
    ├── src/              # Backend source code (TypeScript)
    │   ├── server.ts     # Express server setup
    │   ├── db.ts         # SQLite database initialization and access
    │   ├── middleware/
    │   │   └── auth.ts   # Basic authentication middleware
    │   └── routes/
    │       ├── fileRoutes.ts # Routes for file upload and access
    │       └── adminRoutes.ts# Routes for admin panel functionalities
    ├── dist/             # Output directory for compiled backend JavaScript (generated)
    ├── uploads/          # Directory for storing uploaded files (persistent via Docker volume)
    └── database/         # Directory for SQLite database file (persistent via Docker volume)
```

## Contributing

Contributions are welcome! Please feel free to submit a pull request or open an issue.

## License

This project is open source and available under the MIT License (or choose another license if you prefer).
```
